// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Channel9Plugin.Tests.Integration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Channel 9 plugin")]
    public partial class Channel9PluginFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Channel9Plugin.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Channel 9 plugin", "In order to watch Channel 9 videos on my XBox\r\nAs an XBox owner using the PlayOn " +
                    "media server\r\nI want to have a plugin for PlayOn that streams videos from Channe" +
                    "l 9", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
testRunner.Given("a file \'Channel9.rss\' at the URL \'http://channel9.msdn.com/Feeds/RSS/\'");
#line 8
testRunner.And("a file \'Shows_Channel9.htm\' at the URL \'http://channel9.msdn.com/shows/\'");
#line 9
testRunner.And("a file \'ButWhy.rss\' at the URL \'http://channel9.msdn.com/shows/ButWhy/feed/wmvhig" +
                    "h\'");
#line 10
testRunner.And("a file \'Ping.rss\' at the URL \'http://channel9.msdn.com/shows/PingShow/feed/wmvhig" +
                    "h\'");
#line 11
testRunner.And("a Channel 9 provider");
#line 12
testRunner.And("a settings object");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Description")]
        public virtual void Description()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Description", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
testRunner.Then("the settings should have a description of \'Channel 9 (MSDN)\'");
#line 16
testRunner.And("the settings should have an image");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Have an RSS root folder")]
        public virtual void HaveAnRSSRootFolder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Have an RSS root folder", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
testRunner.When("I retrieve the children of the root");
#line 21
testRunner.Then("there should be 2 children");
#line 22
testRunner.And("child 0 should be named \'RSS\'");
#line 23
testRunner.And("child 1 should be named \'Shows\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve RSS items")]
        public virtual void RetrieveRSSItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve RSS items", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
testRunner.When("I retrieve the payload of \'root=>RSS\'");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table1.AddRow(new string[] {
                        "Title",
                        "Visual Studio LightSwitch - Beyond the Basics"});
#line 27
testRunner.Then("child 1 should have these attributes:", ((string)(null)), table1);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("RSS item count")]
        public virtual void RSSItemCount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RSS item count", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
testRunner.When("I retrieve the payload of \'root=>RSS\'");
#line 33
testRunner.Then("there should be 25 children");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve RSS items twice")]
        public virtual void RetrieveRSSItemsTwice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve RSS items twice", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
testRunner.When("I retrieve the payload of \'root=>RSS\'");
#line 37
testRunner.And("I retrieve the payload of \'root=>RSS\'");
#line 38
testRunner.Then("there should be 25 children");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Folders item count")]
        public virtual void FoldersItemCount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Folders item count", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
testRunner.When("I retrieve the payload of \'root=>Shows\'");
#line 42
testRunner.Then("there should be 21 children");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve show folders twice")]
        public virtual void RetrieveShowFoldersTwice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve show folders twice", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
testRunner.When("I retrieve the payload of \'root=>Shows\'");
#line 46
testRunner.And("I retrieve the payload of \'root=>Shows\'");
#line 47
testRunner.Then("there should be 21 children");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Shows folder title")]
        public virtual void ShowsFolderTitle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Shows folder title", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
testRunner.When("I retrieve the payload of \'root=>Shows\'");
#line 51
testRunner.And("I examine child #1 as a folder");
#line 52
testRunner.Then("the folder should have a title of \'In the Office\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Media URL")]
        public virtual void MediaURL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Media URL", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
testRunner.When("I retrieve the payload of \'root=>RSS\'");
#line 56
testRunner.And("I examine child #1 as a video file");
#line 57
testRunner.Then("the video file should have a media URL of \'http://ecn.channel9.msdn.com/o9/ch9/62" +
                    "96/566296/LightSwitchBeyondBasics_ch9.wmv\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Shows media URL")]
        public virtual void ShowsMediaURL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Shows media URL", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
testRunner.When("I retrieve the payload of \'root=>Shows=>But Why?\'");
#line 61
testRunner.And("I examine child #1 as a video file");
#line 62
testRunner.Then("the video file should have a media URL of \'http://ecn.channel9.msdn.com/o9/ch9/27" +
                    "30/562730/Giblets3_ch9.wmv\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Duration")]
        public virtual void Duration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Duration", ((string[])(null)));
#line 64
this.ScenarioSetup(scenarioInfo);
#line 65
testRunner.When("I retrieve the payload of \'root=>RSS\'");
#line 66
testRunner.And("I examine child #1 as a video file");
#line 67
testRunner.Then("the video file should have a duration of 2604000");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Thumbnail")]
        public virtual void Thumbnail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Thumbnail", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
testRunner.When("I retrieve the payload of \'root=>RSS\'");
#line 71
testRunner.And("I examine child #1 as a video file");
#line 72
testRunner.Then("the video file should have a thumbnail \'http://ecn.channel9.msdn.com/o9/ch9/6296/" +
                    "566296/LightSwitchBeyondBasics_320_ch9.png\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Publication date")]
        public virtual void PublicationDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publication date", ((string[])(null)));
#line 74
this.ScenarioSetup(scenarioInfo);
#line 75
testRunner.When("I retrieve the payload of \'root=>RSS\'");
#line 76
testRunner.And("I examine child #1 as a video file");
#line 77
testRunner.Then("the video file should have a publication date of \'Wed, 11 Aug 2010 19:04:00 GMT\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Don\'t retrieve children of media")]
        public virtual void DonTRetrieveChildrenOfMedia()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Don\'t retrieve children of media", ((string[])(null)));
#line 79
this.ScenarioSetup(scenarioInfo);
#line 80
testRunner.When("I retrieve the payload of \'root=>RSS=>1\' without children");
#line 81
testRunner.Then("the payload should be a media file");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sort order")]
        public virtual void SortOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort order", ((string[])(null)));
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
testRunner.When("I retrieve the payload of \'root=>RSS\'");
#line 85
testRunner.Then("the children should have sort prefixes ordered by publication date descending");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Media XML")]
        public virtual void MediaXML()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Media XML", ((string[])(null)));
#line 87
this.ScenarioSetup(scenarioInfo);
#line 88
testRunner.When("I retrieve media child #1 of \'root=>RSS\'");
#line 89
testRunner.And("I resolve the item into XML");
#line 90
testRunner.Then("the xml should contain \"/media/url[@type=\'wmv\']\"");
#line 91
testRunner.And("the xml should contain \"/media/url[.=\'http://ecn.channel9.msdn.com/o9/ch9/6296/56" +
                    "6296/LightSwitchBeyondBasics_ch9.wmv\']\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Missing duration")]
        public virtual void MissingDuration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Missing duration", ((string[])(null)));
#line 93
this.ScenarioSetup(scenarioInfo);
#line 94
testRunner.When("I retrieve the payload of \'root=>Shows=>Ping!\'");
#line 95
testRunner.Then("there should be 25 children");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
